*&---------------------------------------------------------------------*
*& Include          
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Evnet Handler Class.
*&---------------------------------------------------------------------*
CLASS LCL_EVENT_HANDLER DEFINITION.
  PUBLIC SECTION.
    METHODS: HANDLE_DOUBLE_CLICK
        FOR EVENT DOUBLE_CLICK OF CL_GUI_ALV_GRID
            IMPORTING E_ROW
                      E_COLUMN
                      SENDER.

    METHODS: HANDLE_HOTSPOT_CLICK
      FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID
          IMPORTING E_ROW_ID
                    E_COLUMN_ID
                    SENDER.

    METHODS: HANDLE_TOOLBAR
      FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID
          IMPORTING E_OBJECT
                    SENDER.

    METHODS: HANDLE_USER_COMMAND
      FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
          IMPORTING E_UCOMM
                    SENDER.

    METHODS: HANDLE_DATA_CHANGED
      FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID
          IMPORTING ER_DATA_CHANGED
                    SENDER.

    METHODS: HANDLE_ONF4
      FOR EVENT ONF4 OF CL_GUI_ALV_GRID
      IMPORTING E_FIELDNAME
                E_FIELDVALUE
                ES_ROW_NO
                E_DISPLAY
                ER_EVENT_DATA
                SENDER.

    METHODS: HANDLE_TOP_OF_PAGE
      FOR EVENT TOP_OF_PAGE OF CL_GUI_ALV_GRID
      IMPORTING E_DYNDOC_ID
                SENDER.
ENDCLASS.

CLASS LCL_EVENT_HANDLER IMPLEMENTATION.
  METHOD HANDLE_DOUBLE_CLICK.
    PERFORM HANDLE_DOUBLE_CLICK USING E_ROW
                                      E_COLUMN
                                      SENDER.
  ENDMETHOD.

  METHOD HANDLE_HOTSPOT_CLICK.
    PERFORM HANDLE_HOTSPOT USING E_ROW_ID
                                 E_COLUMN_ID
                                 SENDER.
  ENDMETHOD.
*
  METHOD HANDLE_TOOLBAR.
    PERFORM HANDLE_TOOLBAR USING E_OBJECT
                                 SENDER.
  ENDMETHOD.

  METHOD HANDLE_USER_COMMAND.
    PERFORM HANDLE_UCOM USING E_UCOMM
                              SENDER.
  ENDMETHOD.

  METHOD HANDLE_DATA_CHANGED.
    PERFORM HANDLE_DATA_CHANGED USING ER_DATA_CHANGED
                                      SENDER.
  ENDMETHOD.

  METHOD HANDLE_ONF4.
    PERFORM HANDLE_ONF4 USING E_FIELDNAME
                              E_FIELDVALUE
                              ES_ROW_NO
                              E_DISPLAY
                              ER_EVENT_DATA
                              SENDER.
  ENDMETHOD.

  METHOD HANDLE_TOP_OF_PAGE.
    PERFORM HANDLE_TOP_OF_PAGE USING E_DYNDOC_ID
                                     SENDER.
  ENDMETHOD.
ENDCLASS.



*&---------------------------------------------------------------------*
*& ALV Interface.
*&---------------------------------------------------------------------*
INTERFACE lif_alv.
  CONSTANTS:
    MC_CUST_CONT_01 TYPE FIELDNAME VALUE 'GO_CONTAINER_01',
    MC_DOCK_CONT_01 TYPE FIELDNAME VALUE 'GO_DOCKING_01',

    MC_GRID_01 TYPE FIELDNAME VALUE 'GO_GRID_01',
    MC_GRID_02 TYPE FIELDNAME VALUE 'GO_GRID_02',
    MC_GRID_03 TYPE FIELDNAME VALUE 'GO_GRID_03',
    MC_GRID_04 TYPE FIELDNAME VALUE 'GO_GRID_04',
    MC_GRID_05 TYPE FIELDNAME VALUE 'GO_GRID_05',
    MC_GRID_06 TYPE FIELDNAME VALUE 'GO_GRID_06',

    MC_DOCK_CONT_PREFIX       TYPE FIELDNAME VALUE 'GO_DOCKING_',
    MC_SPLITTER_PREFIX_INNER  TYPE FIELDNAME VALUE 'MO_SPLITTER_SUB',
    MC_DOCK_CONT_PREFIX_INNER TYPE FIELDNAME VALUE 'MO_DOCK_CONT_',
    MC_DOCK_GRID_PREFIX_INNER TYPE FIELDNAME VALUE 'MO_GRID_',
    MC_DATA_PREFIX_INNER      TYPE FIELDNAME VALUE 'MO_DATA_'.

  TYPES: BEGIN OF TS_GRIDS,
    INDEX        TYPE N LENGTH 2,
    TITLE        TYPE STRING,
    NAME         TYPE FIELDNAME,
    FCAT_FORM    TYPE FIELDNAME,
    DISPLAY_MODE TYPE I,
    DOUBLE_CLICK TYPE C LENGTH 1,
    DATA         TYPE REF TO DATA,
    GRID         TYPE REF TO CL_GUI_ALV_GRID,
    LAYOUT       TYPE LVC_S_LAYO,
    FIELDCAT     TYPE LVC_T_FCAT,
    EXCLUDE      TYPE UI_FUNCTIONS,
    SORT         TYPE LVC_T_SORT,
    FILTER       TYPE LVC_T_FILT,
    _CONTAINER   TYPE REF TO CL_GUI_CONTAINER,
           END OF TS_GRIDS,
    TT_GRIDS TYPE TABLE OF TS_GRIDS WITH KEY INDEX.
ENDINTERFACE.

*&---------------------------------------------------------------------*
*& ALV Object.
*&---------------------------------------------------------------------*
CLASS LCL_ALV_OBJECT DEFINITION.
PUBLIC SECTION.
  INTERFACES LIF_ALV.
************************************************************************
  TYPES TS_GRIDS TYPE LIF_ALV=>TS_GRIDS.
  TYPES TT_GRIDS TYPE LIF_ALV=>TT_GRIDS.
************************************************************************
  DATA MS_GRID_INFO  TYPE TS_GRIDS.

  DATA MO_DATA       TYPE REF TO DATA.
  DATA MO_GRID       TYPE REF TO CL_GUI_ALV_GRID.
  DATA MT_EXCLUDE    TYPE UI_FUNCTIONS.
  DATA MS_VARIANT    TYPE DISVARIANT.
  DATA MS_STABLE     TYPE LVC_S_STBL.
  DATA MT_ONF4       TYPE LVC_T_F4.
  DATA MS_LAYOUT     TYPE LVC_S_LAYO.
  DATA MT_SORT       TYPE LVC_T_SORT.
  DATA MT_FILTER     TYPE LVC_T_FILT.
  DATA MT_FIELDCAT   TYPE LVC_T_FCAT.
  DATA MV_GRID_TITLE TYPE STRING.

  DATA MO_EVENT_HANDLER TYPE REF TO LCL_EVENT_HANDLER.
************************************************************************
  METHODS CONSTRUCTOR IMPORTING IS_GRID_INFO TYPE TS_GRIDS.
  METHODS DISPLAY IMPORTING IV_VARIANT TYPE C OPTIONAL.
  METHODS REFRESH IMPORTING IV_STABLE  TYPE C OPTIONAL
                            IV_SOFT    TYPE C OPTIONAL.
  METHODS SET_DISPLAY_MODE IMPORTING IV_MODE TYPE I OPTIONAL.
  METHODS SET_FIELDCAT IMPORTING IV_FORM_NAME TYPE FIELDNAME
                       CHANGING  CT_FIELDCAT  TYPE LVC_T_FCAT.
  METHODS ADD_BUTTEN    IMPORTING IV_BUTTEN TYPE UI_FUNC.
  METHODS REMOVE_BUTTEN IMPORTING IV_BUTTEN TYPE UI_FUNC.
  METHODS CHECK_CHANGED_DATA.

PRIVATE SECTION.
  METHODS _INIT_LAYO.
  METHODS _INIT_EXCLUDE.
  METHODS _INIT_FIELDCAT.
  METHODS _INIT_EVENT.
  METHODS _SET_F4_FIELDS IMPORTING IV_FIELDNAME TYPE FIELDNAME.
  METHODS _SET_GRID_TITLE.
ENDCLASS.

CLASS LCL_ALV_OBJECT IMPLEMENTATION.
  METHOD CONSTRUCTOR.
    MS_GRID_INFO = IS_GRID_INFO.
    MO_DATA = IS_GRID_INFO-DATA.

    MO_GRID = NEW #( I_PARENT = MS_GRID_INFO-_CONTAINER ).
    MO_GRID->SET_NAME( CONV #( MS_GRID_INFO-NAME ) ).
    MS_GRID_INFO-GRID = MO_GRID.

    _INIT_LAYO( ).
    _INIT_FIELDCAT( ).
    _INIT_EXCLUDE( ).
    _INIT_EVENT( ).
  ENDMETHOD.
  METHOD DISPLAY.
    FIELD-SYMBOLS: <L_OUTTAB> TYPE STANDARD TABLE.

    IF IV_VARIANT = 'X'.
      MS_VARIANT-REPORT   = SY-REPID.
      MS_VARIANT-USERNAME = SY-UNAME.
    ENDIF.

    SET_DISPLAY_MODE( MS_GRID_INFO-DISPLAY_MODE ).

    ASSIGN MS_GRID_INFO-DATA->* TO <L_OUTTAB>.
    MS_GRID_INFO-GRID->SET_TABLE_FOR_FIRST_DISPLAY(
      EXPORTING
        is_variant                    = MS_VARIANT
        i_save                        = 'A'
        i_default                     = 'X'
        is_layout                     = MS_LAYOUT
        it_toolbar_excluding          = MT_EXCLUDE
      CHANGING
        it_outtab                     = <L_OUTTAB>
        it_fieldcatalog               = MT_FIELDCAT
        it_sort                       = MT_SORT
        it_filter                     = MT_FILTER ).
  ENDMETHOD.
  METHOD REFRESH.
    CLEAR: MS_STABLE.
    IF IV_STABLE = 'X'.
      MS_STABLE-ROW = 'X'.
      MS_STABLE-COL = 'X'.
    ENDIF.

    _SET_GRID_TITLE( ).
    MS_GRID_INFO-GRID->SET_FRONTEND_LAYOUT( IS_LAYOUT = MS_GRID_INFO-LAYOUT ).
    MS_GRID_INFO-GRID->SET_FRONTEND_FIELDCATALOG( IT_FIELDCATALOG = MS_GRID_INFO-FIELDCAT ).

    MS_GRID_INFO-GRID->REFRESH_TABLE_DISPLAY(
      EXPORTING
        IS_STABLE      = MS_STABLE
        I_SOFT_REFRESH = IV_SOFT ).
  ENDMETHOD.
  METHOD SET_DISPLAY_MODE.
    MS_GRID_INFO-GRID->SET_READY_FOR_INPUT( IV_MODE ).
  ENDMETHOD.
  METHOD SET_FIELDCAT.
    DATA LV_PROG_NAME TYPE FIELDNAME.
    LV_PROG_NAME = SY-REPID.
    PERFORM (IV_FORM_NAME) IN PROGRAM (LV_PROG_NAME) IF FOUND
                           CHANGING CT_FIELDCAT.
  ENDMETHOD.
  METHOD ADD_BUTTEN.
    DELETE MS_GRID_INFO-EXCLUDE WHERE TABLE_LINE = IV_BUTTEN.
  ENDMETHOD.
  METHOD REMOVE_BUTTEN.
    APPEND IV_BUTTEN TO MS_GRID_INFO-EXCLUDE.
  ENDMETHOD.
  METHOD CHECK_CHANGED_DATA.
    MS_GRID_INFO-GRID->CHECK_CHANGED_DATA(
*      IMPORTING
*        e_valid   =                  " Entries are Consistent
*      CHANGING
*        c_refresh = 'X'              " Character Field of Length 1
    ).
  ENDMETHOD.
************************************************************************
  METHOD _INIT_LAYO.
    CLEAR: MS_LAYOUT.

    _SET_GRID_TITLE( ).
    MS_LAYOUT-GRID_TITLE = MV_GRID_TITLE.

    MS_LAYOUT-ZEBRA      = 'X'.
    MS_LAYOUT-SEL_MODE   = 'D'.
    MS_LAYOUT-CWIDTH_OPT = 'A'.
    MS_LAYOUT-SMALLTITLE = 'X'.
    MS_LAYOUT-STYLEFNAME = 'STYLE'.

    MS_GRID_INFO-LAYOUT = MS_LAYOUT.
  ENDMETHOD.
  METHOD _INIT_EXCLUDE.
    CLEAR: MT_EXCLUDE.
    MT_EXCLUDE =  VALUE #( ( CL_GUI_ALV_GRID=>MC_FC_CHECK )
                           ( CL_GUI_ALV_GRID=>MC_FC_LOC_CUT )
                           ( CL_GUI_ALV_GRID=>MC_FC_LOC_COPY )
                           ( CL_GUI_ALV_GRID=>MC_MB_PASTE )
                           ( CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO )
                           ( CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW )
                           ( CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW )
                           ( CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW )
                           ( CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW )
                           ( CL_GUI_ALV_GRID=>MC_MB_SUM )
                           ( CL_GUI_ALV_GRID=>MC_MB_SUBTOT )
                           ( CL_GUI_ALV_GRID=>MC_FC_PRINT_BACK )
                           ( CL_GUI_ALV_GRID=>MC_MB_VIEW )
                           ( CL_GUI_ALV_GRID=>MC_FC_GRAPH )
                           ( CL_GUI_ALV_GRID=>MC_FC_INFO ) ).

    MS_GRID_INFO-EXCLUDE = MT_EXCLUDE.
  ENDMETHOD.
  METHOD _INIT_FIELDCAT.
    DATA: LS_FIELDCAT TYPE LVC_S_FCAT.

    CL_SALV_DATA_DESCR=>GET_TABLE_DESCRIPTOR_INFO(
      EXPORTING R_TABLE       = MS_GRID_INFO-DATA
      IMPORTING T_DFIES       = DATA(LT_DFIES) ).

    LOOP AT LT_DFIES INTO DATA(LS_DFIES).
      LS_FIELDCAT = CORRESPONDING #( LS_DFIES ).
      APPEND LS_FIELDCAT TO MT_FIELDCAT.
      CLEAR LS_FIELDCAT.
    ENDLOOP.

    SET_FIELDCAT( EXPORTING IV_FORM_NAME = MS_GRID_INFO-FCAT_FORM
                  CHANGING  CT_FIELDCAT  = MT_FIELDCAT ).

    MS_GRID_INFO-FIELDCAT = MT_FIELDCAT.
  ENDMETHOD.
  METHOD _INIT_EVENT.
    CREATE OBJECT MO_EVENT_HANDLER.

    LOOP AT MS_GRID_INFO-FIELDCAT INTO DATA(LS_FCAT).
      IF LS_FCAT-HOTSPOT = 'X'.
        SET HANDLER MO_EVENT_HANDLER->HANDLE_HOTSPOT_CLICK FOR MS_GRID_INFO-GRID.
      ENDIF.

      IF LS_FCAT-F4AVAILABL = 'X'.
        _SET_F4_FIELDS( LS_FCAT-FIELDNAME ).
      ENDIF.
    ENDLOOP.

    MS_GRID_INFO-GRID->REGISTER_F4_FOR_FIELDS( EXPORTING IT_F4 = MT_ONF4 ).
    MS_GRID_INFO-GRID->REGISTER_EDIT_EVENT( EXPORTING I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED ).

    SET HANDLER:
           MO_EVENT_HANDLER->HANDLE_TOOLBAR       FOR MS_GRID_INFO-GRID,
           MO_EVENT_HANDLER->HANDLE_USER_COMMAND  FOR MS_GRID_INFO-GRID,
           MO_EVENT_HANDLER->HANDLE_DATA_CHANGED  FOR MS_GRID_INFO-GRID,
           MO_EVENT_HANDLER->HANDLE_ONF4          FOR MS_GRID_INFO-GRID,
           MO_EVENT_HANDLER->HANDLE_TOP_OF_PAGE   FOR MS_GRID_INFO-GRID.

      IF MS_GRID_INFO-DOUBLE_CLICK = 'X'.
        SET HANDLER: MO_EVENT_HANDLER->HANDLE_DOUBLE_CLICK FOR MS_GRID_INFO-GRID.
      ENDIF.
  ENDMETHOD.
  METHOD _SET_F4_FIELDS.
    INSERT VALUE #( FIELDNAME = IV_FIELDNAME REGISTER = 'X' ) INTO TABLE MT_ONF4.
  ENDMETHOD.
  METHOD _SET_GRID_TITLE.
    DATA: LV_TITLE TYPE STRING.
    DATA: LV_LINES_STR TYPE C LENGTH 50.
    FIELD-SYMBOLS: <LT_DATA> TYPE TABLE.

    ASSIGN MS_GRID_INFO-DATA->* TO <LT_DATA>.
    DESCRIBE TABLE <LT_DATA> LINES DATA(LV_LINES).

    LV_LINES_STR = CONV #( LV_LINES ).
    CALL FUNCTION 'BUX_DECIMAL_START'
      EXPORTING
        i_value_db             = LV_LINES_STR
      IMPORTING
        E_VALUE_DYNP           = LV_LINES_STR
      EXCEPTIONS
        FORMAT_EXCEPTION       = 1
        OTHERS                 = 2 .
    IF SY-SUBRC <> 0.
*      EXIT.
    ENDIF.

    TRANSLATE LV_LINES_STR USING '. '.
    CONDENSE LV_LINES_STR NO-GAPS.
    LV_TITLE = TEXT-T01. " (Total : &)
    REPLACE '&' IN LV_TITLE WITH LV_LINES_STR.

    LV_TITLE = MS_GRID_INFO-TITLE && | | && LV_TITLE.
    MV_GRID_TITLE = LV_TITLE.
    MS_GRID_INFO-LAYOUT-GRID_TITLE = MV_GRID_TITLE.
  ENDMETHOD.
ENDCLASS.



*&---------------------------------------------------------------------*
*& ALV Class.
*&---------------------------------------------------------------------*
CLASS LCL_ALV DEFINITION.
PUBLIC SECTION.
  INTERFACES LIF_ALV.

  TYPES: TY_INDEX TYPE N LENGTH 2.
  TYPES: TT_GRIDS TYPE LCL_ALV_OBJECT=>TT_GRIDS.

  TYPES: BEGIN OF TS_SUB_MTX,
        PARENT_ROW  TYPE N LENGTH 2,
        ROW         TYPE I,
        COL         TYPE I,
        WIDTH       TYPE I,
        HEIGHT      TYPE I,
         END OF TS_SUB_MTX,
      TT_SUB_MTX TYPE TABLE OF TS_SUB_MTX WITH DEFAULT KEY.

  TYPES: BEGIN OF TS_SPLIT_MTX,
      ROW    TYPE I, " #Row.
      COL    TYPE I, " #Col.
      HEIGHT TYPE I, " Row HeIght.
      WIDTH  TYPE I, " Col Width.
      SUB    TYPE TT_SUB_MTX,
         END OF TS_SPLIT_MTX.

  TYPES: BEGIN OF TS_OBJ_ACCUM,
      PARENT_ROW  TYPE N LENGTH 2,
      ROW         TYPE I,
      COL         TYPE I,
      ACCUM_INDEX TYPE I,
        END OF TS_OBJ_ACCUM,
    TT_OBJ_ACCUM TYPE TABLE OF TS_OBJ_ACCUM.

  TYPES: BEGIN OF TS_CONSTRUCT_OPT,
      TOP_OF_PAGE  TYPE C LENGTH 1,
         END OF TS_CONSTRUCT_OPT.

  TYPES: BEGIN OF TS_OBJECTS,
    INDEX TYPE N LENGTH 2,
    GRID  TYPE REF TO LCL_ALV_OBJECT,
         END OF TS_OBJECTS,
    TT_OBJECTS TYPE TABLE OF TS_OBJECTS WITH KEY INDEX.

  DATA: MO_CUSTOM_CONT    TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
        MO_SPLITTER       TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
        MO_SPLITTER_SUB01 TYPE REF TO CL_GUI_SPLITTER_CONTAINER ##NEEDED,
        MO_SPLITTER_SUB02 TYPE REF TO CL_GUI_SPLITTER_CONTAINER ##NEEDED,
        MO_SPLITTER_SUB03 TYPE REF TO CL_GUI_SPLITTER_CONTAINER ##NEEDED.

  DATA: MO_GRID_01 TYPE REF TO LCL_ALV_OBJECT ##NEEDED,
        MO_GRID_02 TYPE REF TO LCL_ALV_OBJECT ##NEEDED,
        MO_GRID_03 TYPE REF TO LCL_ALV_OBJECT ##NEEDED,
        MO_GRID_04 TYPE REF TO LCL_ALV_OBJECT ##NEEDED,
        MO_GRID_05 TYPE REF TO LCL_ALV_OBJECT ##NEEDED,
        MO_GRID_06 TYPE REF TO LCL_ALV_OBJECT ##NEEDED.

  DATA: MO_DYNDOC_ID  TYPE REF TO CL_DD_DOCUMENT,
        MO_HTML_CNTRL TYPE REF TO CL_GUI_HTML_VIEWER.

  METHODS CONSTRUCTOR
    IMPORTING IV_CONTAINER_NAME TYPE FIELDNAME
              IT_GRIDS_INFO TYPE LCL_ALV_OBJECT=>TT_GRIDS
              IS_SPLIT      TYPE TS_SPLIT_MTX        OPTIONAL
              IS_OPTIONS    TYPE TS_CONSTRUCT_OPT    OPTIONAL.
  METHODS DISPLAY IMPORTING IV_INDEX   TYPE TY_INDEX OPTIONAL
                            IV_VARIANT TYPE C        OPTIONAL.
  METHODS DISPLAY_TOP_OF_PAGE.
  METHODS REFRESH IMPORTING IV_INDEX   TYPE TY_INDEX OPTIONAL
                            IV_STABLE  TYPE C        OPTIONAL
                            IV_SOFT    TYPE C        OPTIONAL.

  METHODS GET_SELECTED_ROW IMPORTING IV_INDEX               TYPE TY_INDEX
                           RETURNING VALUE(RT_SELECTED_ROW) TYPE LVC_T_ROW.


PRIVATE SECTION.
  DATA _MV_OBJECT_COUNT TYPE N LENGTH 2.

  DATA _MT_GRIDS_INFO TYPE LCL_ALV_OBJECT=>TT_GRIDS.
  DATA _MS_SPLIT      TYPE TS_SPLIT_MTX.
  DATA _MS_OPTIONS    TYPE TS_CONSTRUCT_OPT.
  DATA _MT_OBJECTS    TYPE TT_OBJECTS.
  DATA _MT_OBJ_ACCUM  TYPE TT_OBJ_ACCUM.

  METHODS _CREATE_CUSTOM_CONTAINER   IMPORTING IV_CONTAINER_NAME TYPE FIELDNAME.
  METHODS _CREATE_DOCKING_CONTAINER  IMPORTING IV_CONTAINER_NAME TYPE FIELDNAME.
  METHODS _CREATE_SPLITTER_INFO.
  METHODS _CREATE_SPLITTER_OBJECT    IMPORTING IV_CONTAINER_NAME TYPE FIELDNAME.
ENDCLASS.

CLASS LCL_ALV IMPLEMENTATION.
  METHOD CONSTRUCTOR.
    _MV_OBJECT_COUNT = '01'.
    _MT_GRIDS_INFO   = IT_GRIDS_INFO.
    _MS_SPLIT        = IS_SPLIT.
    _MS_OPTIONS      = IS_OPTIONS.

    IF IV_CONTAINER_NAME CP 'GO_CONTAINER_*'.
      _CREATE_CUSTOM_CONTAINER( IV_CONTAINER_NAME ).

    ELSEIF IV_CONTAINER_NAME CP 'GO_DOCKING_*'.
      _CREATE_DOCKING_CONTAINER( IV_CONTAINER_NAME ).

    ENDIF.
  ENDMETHOD.
  METHOD DISPLAY.
    IF IV_INDEX IS INITIAL.
      LOOP AT _MT_OBJECTS INTO DATA(LS_OBJECT).
        IF LS_OBJECT-GRID IS NOT INITIAL.
          LS_OBJECT-GRID->DISPLAY( IV_VARIANT ).
        ENDIF.
      ENDLOOP.
    ELSE.
      READ TABLE _MT_OBJECTS INTO LS_OBJECT WITH KEY INDEX = IV_INDEX BINARY SEARCH.
      IF SY-SUBRC = 0.
        LS_OBJECT-GRID->DISPLAY( IV_VARIANT ).
      ENDIF.
    ENDIF.

    IF _MS_OPTIONS-TOP_OF_PAGE = 'X'.
      MO_DYNDOC_ID->INITIALIZE_DOCUMENT( EXPORTING BACKGROUND_COLOR = CL_DD_AREA=>COL_TEXTAREA ).

      READ TABLE _MT_GRIDS_INFO INTO DATA(LS_GRID) WITH KEY INDEX = '02' BINARY SEARCH.
      IF SY-SUBRC = 0.
        LS_GRID-GRID->LIST_PROCESSING_EVENTS(
          EXPORTING
            I_EVENT_NAME = 'TOP_OF_PAGE'
            I_DYNDOC_ID  = MO_DYNDOC_ID ).
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD REFRESH.
    DATA: LV_STABLE.

    IF IV_STABLE IS SUPPLIED.
      LV_STABLE = IV_STABLE.
    ELSE.
      LV_STABLE = 'X'.
    ENDIF.

    IF IV_INDEX IS INITIAL.
      LOOP AT _MT_OBJECTS INTO DATA(LS_OBJECT).
        IF LS_OBJECT-GRID IS NOT INITIAL.
          LS_OBJECT-GRID->REFRESH( IV_STABLE = LV_STABLE IV_SOFT = IV_SOFT ).
        ENDIF.
      ENDLOOP.
    ELSE.
      READ TABLE _MT_OBJECTS INTO LS_OBJECT WITH KEY INDEX = IV_INDEX BINARY SEARCH.
      IF SY-SUBRC = 0.
        LS_OBJECT-GRID->REFRESH( IV_STABLE = IV_STABLE IV_SOFT = IV_SOFT ).
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD DISPLAY_TOP_OF_PAGE.
    IF MO_HTML_CNTRL IS INITIAL.
      READ TABLE _MT_GRIDS_INFO INTO DATA(LS_GRID) WITH KEY INDEX = '01' BINARY SEARCH.
      IF SY-SUBRC = 0.
        MO_HTML_CNTRL = NEW #( PARENT = LS_GRID-_CONTAINER ).

        MO_DYNDOC_ID->MERGE_DOCUMENT( ).
        MO_DYNDOC_ID->HTML_CONTROL = MO_HTML_CNTRL.

        MO_DYNDOC_ID->DISPLAY_DOCUMENT(
          EXPORTING
            REUSE_CONTROL = 'X'
            PARENT = LS_GRID-_CONTAINER ).
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD GET_SELECTED_ROW.
    READ TABLE _MT_OBJECTS INTO DATA(LS_OBJECT) WITH KEY INDEX = IV_INDEX BINARY SEARCH.
    IF SY-SUBRC = 0.
      LS_OBJECT-GRID->MO_GRID->GET_SELECTED_ROWS( IMPORTING ET_INDEX_ROWS = RT_SELECTED_ROW ).
    ENDIF.
  ENDMETHOD.
************************************************************************
  METHOD _CREATE_CUSTOM_CONTAINER.
    CHECK _MT_GRIDS_INFO IS NOT INITIAL.

    READ TABLE _MT_GRIDS_INFO ASSIGNING FIELD-SYMBOL(<L_GRID>) INDEX 1.
    IF <L_GRID> IS ASSIGNED.
      MO_CUSTOM_CONT = NEW #( CONTAINER_NAME = IV_CONTAINER_NAME ).
      MO_CUSTOM_CONT->SET_NAME( CONV #( IV_CONTAINER_NAME ) ).
      <L_GRID>-_CONTAINER = MO_CUSTOM_CONT.

      MO_GRID_01 = NEW #( <L_GRID> ).
      <L_GRID> = MO_GRID_01->MS_GRID_INFO.

      INSERT VALUE #( INDEX = _MV_OBJECT_COUNT GRID = MO_GRID_01 ) INTO TABLE _MT_OBJECTS.
    ENDIF.
  ENDMETHOD.
  METHOD _CREATE_DOCKING_CONTAINER.
    CHECK _MT_GRIDS_INFO IS NOT INITIAL.

    MO_CUSTOM_CONT = NEW #( CONTAINER_NAME = IV_CONTAINER_NAME ).
    MO_CUSTOM_CONT->SET_NAME( CONV #( IV_CONTAINER_NAME ) ).

    IF _MS_SPLIT IS NOT INITIAL.
      _CREATE_SPLITTER_INFO( ).
      _CREATE_SPLITTER_OBJECT( IV_CONTAINER_NAME ).
    ELSE.
      READ TABLE _MT_GRIDS_INFO ASSIGNING FIELD-SYMBOL(<L_GRID>) INDEX 1.
      IF <L_GRID> IS ASSIGNED.
        <L_GRID>-_CONTAINER = MO_CUSTOM_CONT.
        MO_GRID_01 = NEW #( <L_GRID> ).
        <L_GRID>-GRID = MO_GRID_01->MO_GRID.

        INSERT VALUE #( INDEX = _MV_OBJECT_COUNT GRID = MO_GRID_01 ) INTO TABLE _MT_OBJECTS.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD _CREATE_SPLITTER_INFO.
    DATA LS_OBJ_ACCUM     TYPE TS_OBJ_ACCUM.
    DATA LT_OBJ_ACCUM     TYPE TT_OBJ_ACCUM.

    DATA(LV_CNT) = _MS_SPLIT-ROW * _MS_SPLIT-COL.
    DATA(LV_ROW_NO) = 1.
    DATA(LV_COL_NO) = 1.
    DATA(LV_SUB_ROW_NO) = 1.

    DATA(LV_ACCUM_IDX) = 0.

    DO LV_CNT TIMES.
      DATA(LV_PARENT_ROW) = SY-INDEX.
      READ TABLE _MS_SPLIT-SUB INTO DATA(LS_SPLIT) WITH KEY PARENT_ROW = LV_PARENT_ROW BINARY SEARCH.
      IF SY-SUBRC = 0.
        DATA(LV_SUB_COL_NO) = 1.

        DATA(LV_CNT_SUB) = LS_SPLIT-ROW * LS_SPLIT-COL.
        DO LV_CNT_SUB TIMES.
          LV_ACCUM_IDX += 1.
          LS_OBJ_ACCUM = VALUE #( PARENT_ROW = LV_PARENT_ROW ACCUM_INDEX = LV_ACCUM_IDX  ROW = LV_SUB_ROW_NO COL = LV_SUB_COL_NO ).
          APPEND LS_OBJ_ACCUM TO LT_OBJ_ACCUM.

          IF LV_SUB_COL_NO < LS_SPLIT-COL.
            LV_SUB_COL_NO += 1.
          ELSEIF LV_SUB_COL_NO = LS_SPLIT-COL.
            IF LV_SUB_ROW_NO < LS_SPLIT-ROW.
              LV_SUB_ROW_NO += 1.
            ELSE.
            ENDIF.
          ENDIF.
        ENDDO.
      ELSE.

        LV_ACCUM_IDX += 1.
        LS_OBJ_ACCUM = VALUE #( PARENT_ROW = LV_PARENT_ROW ACCUM_INDEX = LV_ACCUM_IDX ROW = LV_ROW_NO COL = LV_COL_NO ).
        APPEND LS_OBJ_ACCUM TO LT_OBJ_ACCUM.

      ENDIF.

      IF LV_COL_NO < _MS_SPLIT-COL.
        LV_COL_NO += 1.
      ELSEIF LV_COL_NO = _MS_SPLIT-COL.
        LV_COL_NO = 1.
        IF LV_ROW_NO < _MS_SPLIT-ROW.
          LV_ROW_NO += 1.
        ELSE.
        ENDIF.
      ENDIF.
    ENDDO.

    _MT_OBJ_ACCUM = CORRESPONDING #( LT_OBJ_ACCUM ).
  ENDMETHOD.
  METHOD _CREATE_SPLITTER_OBJECT.
    DATA LV_OBJ_INDEX         TYPE N LENGTH 2.
    DATA LO_CONTAINER         TYPE REF TO CL_GUI_CONTAINER.
    DATA LO_SUB_SPLITTER_DEEP TYPE REF TO CL_GUI_SPLITTER_CONTAINER.

    FIELD-SYMBOLS: <L_GRID_OBJECT>   TYPE REF TO LCL_ALV_OBJECT,
                   <L_SUB_SPLITTER>  TYPE REF TO CL_GUI_SPLITTER_CONTAINER.

    DATA(LV_ROW) = _MS_SPLIT-ROW.
    DATA(LV_COL) = _MS_SPLIT-COL.
    DATA(LV_CNT) = LV_ROW * LV_COL.

    DATA(LV_ROW_NO) = 1.
    DATA(LV_COL_NO) = 1.
    MO_SPLITTER = NEW #( PARENT = MO_CUSTOM_CONT ROWS = LV_ROW COLUMNS = LV_COL ).
    MO_SPLITTER->SET_NAME( CONV #( IV_CONTAINER_NAME ) ).

    IF _MS_SPLIT-HEIGHT IS NOT INITIAL.
      MO_SPLITTER->SET_ROW_HEIGHT( EXPORTING ID = 1 HEIGHT = _MS_SPLIT-HEIGHT ).
    ELSE.
      IF _MS_SPLIT-WIDTH IS NOT INITIAL.
        MO_SPLITTER->SET_COLUMN_WIDTH( EXPORTING ID = 1 WIDTH = _MS_SPLIT-WIDTH ).
      ENDIF.
    ENDIF.

    "--- Assign Container.
    DO LV_CNT TIMES.
      LV_OBJ_INDEX = SY-INDEX.
      READ TABLE _MS_SPLIT-SUB INTO DATA(LS_SUB_SPLIT) WITH KEY PARENT_ROW = LV_OBJ_INDEX BINARY SEARCH.
      IF SY-SUBRC = 0.
        DATA(LO_SUB_SPLITTER) = MO_SPLITTER->GET_CONTAINER( EXPORTING ROW = LV_ROW_NO COLUMN = LV_COL_NO ).
        LO_SUB_SPLITTER->SET_NAME( CONV #( IV_CONTAINER_NAME ) ).
        IF LS_SUB_SPLIT-HEIGHT IS NOT INITIAL.
          MO_SPLITTER->SET_ROW_HEIGHT( EXPORTING ID = SY-INDEX HEIGHT = LS_SUB_SPLIT-HEIGHT ).
        ELSE.
          IF LS_SUB_SPLIT-WIDTH IS NOT INITIAL.
            MO_SPLITTER->SET_COLUMN_WIDTH( EXPORTING ID = SY-INDEX WIDTH = LS_SUB_SPLIT-WIDTH ).
          ENDIF.
        ENDIF.

        LO_SUB_SPLITTER_DEEP = NEW #( PARENT = LO_SUB_SPLITTER ROWS = LS_SUB_SPLIT-ROW COLUMNS = LS_SUB_SPLIT-COL ).
        LO_SUB_SPLITTER_DEEP->SET_NAME( CONV #( IV_CONTAINER_NAME ) ).

        DATA(LV_SUB_SPLITTER_NAME) = LIF_ALV~MC_SPLITTER_PREFIX_INNER && LV_OBJ_INDEX.
        ASSIGN (LV_SUB_SPLITTER_NAME) TO <L_SUB_SPLITTER>.
        <L_SUB_SPLITTER> = LO_SUB_SPLITTER_DEEP.
      ELSE.
        LO_SUB_SPLITTER = MO_SPLITTER->GET_CONTAINER( EXPORTING ROW = LV_ROW_NO COLUMN = LV_COL_NO ).
        LO_SUB_SPLITTER->SET_NAME( CONV #( IV_CONTAINER_NAME ) ).
      ENDIF.

      IF LV_COL_NO < _MS_SPLIT-COL.
        LV_COL_NO += 1.
      ELSEIF LV_COL_NO = _MS_SPLIT-COL.
        LV_COL_NO = 1.
        IF LV_ROW_NO < _MS_SPLIT-ROW.
          LV_ROW_NO += 1.
        ELSE.
        ENDIF.
      ENDIF.
    ENDDO.

    LOOP AT _MT_OBJ_ACCUM INTO DATA(LS_OBJ_ACCUM).
      CLEAR LS_SUB_SPLIT.
      READ TABLE _MS_SPLIT-SUB INTO LS_SUB_SPLIT WITH KEY PARENT_ROW = LS_OBJ_ACCUM-PARENT_ROW BINARY SEARCH.
      IF SY-SUBRC = 0.
        DATA(LV_SUB_SPLIITER_NAME) = LIF_ALV~MC_SPLITTER_PREFIX_INNER && LS_OBJ_ACCUM-PARENT_ROW.
        ASSIGN (LV_SUB_SPLIITER_NAME) TO <L_SUB_SPLITTER>.
        LO_CONTAINER = <L_SUB_SPLITTER>->GET_CONTAINER( EXPORTING ROW = LS_OBJ_ACCUM-ROW COLUMN = LS_OBJ_ACCUM-COL ).
      ELSE.
        LO_CONTAINER = MO_SPLITTER->GET_CONTAINER( EXPORTING ROW = LS_OBJ_ACCUM-ROW COLUMN = LS_OBJ_ACCUM-COL ).
      ENDIF.
      LO_CONTAINER->SET_NAME( CONV #( IV_CONTAINER_NAME ) ).

      READ TABLE _MT_GRIDS_INFO ASSIGNING FIELD-SYMBOL(<L_GRID>) WITH KEY INDEX = LS_OBJ_ACCUM-ACCUM_INDEX BINARY SEARCH.
      IF <L_GRID> IS ASSIGNED.
        <L_GRID>-_CONTAINER = LO_CONTAINER.
      ENDIF.
    ENDLOOP.

    "--- Assign Grid.
    LOOP AT _MT_GRIDS_INFO ASSIGNING <L_GRID>.
      IF <L_GRID> IS ASSIGNED.
        DATA(LV_GRID_NAME) = LIF_ALV~MC_DOCK_GRID_PREFIX_INNER && <L_GRID>-INDEX.
        ASSIGN (LV_GRID_NAME) TO <L_GRID_OBJECT>.

        IF _MS_OPTIONS-TOP_OF_PAGE = 'X'.
          IF <L_GRID>-INDEX = '01'.
            CONTINUE.
          ENDIF.
        ENDIF.

        <L_GRID_OBJECT> = NEW #( <L_GRID> ).
        <L_GRID>-GRID = <L_GRID_OBJECT>->MO_GRID.

        INSERT VALUE #( INDEX = _MV_OBJECT_COUNT GRID = <L_GRID_OBJECT> ) INTO TABLE _MT_OBJECTS.
        _MV_OBJECT_COUNT += 1.
      ENDIF.
    ENDLOOP.

    IF _MS_OPTIONS-TOP_OF_PAGE = 'X'.
      MO_DYNDOC_ID = NEW #( STYLE = 'ALV_GRID' ).
    ENDIF.
  ENDMETHOD.
ENDCLASS.
